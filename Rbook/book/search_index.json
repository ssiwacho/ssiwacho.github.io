[
["index.html", "R สำหรับวิทยาการข้อมูลทางการศึกษา บทที่ 1 บทนำ", " R สำหรับวิทยาการข้อมูลทางการศึกษา สิวะโชติ ศรีสุทธิยากร บทที่ 1 บทนำ ข้อมูล (data) เป็นข้อเท็จจริงที่ใช้สำหรับบ่งชี้หรือแสดงสภาพของปรากฏการณ์ต่าง ๆ หากมีการจัดเก็บ จัดกระทำ วิเคราะห์ และนำเสนอข้อมูลอย่างเหมาะสม จะช่วยให้ผู้ใช้ข้อมูลสามารถเข้าถึงความหมายเชิงลึก (insight) ที่ซ่อนอยู่ในข้อมูล และสามารถใช้ความรู้ที่ได้นี้เพื่อประโยชน์ในการตัดสินใจ หรือดำเนินการเพื่อสร้างมูลค่าเพิ่มให้แก่องค์กรหรือหน่วยงานของตนได้อย่างมีประสิทธิภาพ ในสมัยก่อนนั้นการได้มาซึ่งข้อมูลต่างๆ จำเป็นต้องใช้ทรัพยากรทั้งเงิน บุคลากร และเวลามากพอสมควร จึงทำให้ปริมาณข้อมูลไม่ได้มีมากนัก ส่งผลให้เกิดข้อจำกัดในการใช้ประโยชน์จากข้อมูลให้มีประสิทธิภาพดังที่กล่าวในข้างต้น อย่างไรก็ตามด้วยความก้าวหน้าทางเทคโนโลยีของโลกยุคปัจจุบัน และต้นทุนของอุปกรณ์เทคโนโลยีต่าง ๆ ที่มีแนวโน้มลดลง ทำให้พฤติกรรมของคนส่วนใหญ่เปลี่ยนแปลงไปโดยมีการติดต่อสื่อสารและทำงานบนโลกอินเทอร์เน็ตผ่านทางอุปกรณ์ smart device ต่าง ๆ ในแต่ละวันจึงเกิดการแลกเปลี่ยนข้อมูลจำนวนมหาศาล มีความหลากหลาย และมีการเปลี่ยนแปลงอย่างรวดเร็วบนโลกอินเทอร์เน็ต การเข้าถึงและได้มาซึ่งข้อมูลต่าง ๆ ในปัจจุบันจึงทำได้ง่ายขึ้น ได้ข้อมูลที่มีปริมาณมาก มีความหลากหลาย และทันสมัยอยู่ตลอดเวลา ทำให้หน่วยงานต่าง ๆ ทั้งทางภาครัฐและเอกชนพยายามที่จะเข้าถึงและใช้ข้อมูลดังกล่าวให้เกิดประโยชน์อย่างสูงสุดต่อองค์กรตนเอง ส่งผลให้ข้อมูลถูกยกระดับกลายเป็นแหล่งทรัพยากรที่มีคุณค่าแหล่งใหม่ และผลักดันให้เกิดการพัฒนาศาสตร์ที่เกี่ยวข้องกับการจัดการ และประมวลผลข้อมูลอย่างก้าวกระโดด เกิดเป็นศาสตร์ที่เรียกว่าวิทยาการข้อมูล (data science) จากการเปลี่ยนแปลงดังกล่าวนี้ล้วนผลักดันให้โลกเกิดการเปลี่ยนผ่านจากยุคอุตสาหกรรม (industrial age) เป็นยุคข้อมูลข่าวสาร (information age) อย่างรวดเร็ว "],
["-1-.html", "ส่วนที่ 1 ความรู้พื้นฐาน", " ส่วนที่ 1 ความรู้พื้นฐาน "],
["-r.html", "บทที่ 2 เริ่มต้นใช้ R การดาวน์โหลดและติดตั้ง R สภาพแวดล้อมของ R การคำนวณทางคณิตศาสตร์พื้นฐาน", " บทที่ 2 เริ่มต้นใช้ R R เป็นภาษาคอมพิวเตอร์ยุคใหม่ที่ถูกพัฒนาขึ้นให้มีความสามารถหลักในสามด้านได้แก่ การนำเข้าและจัดกระทำข้อมูล การคำนวณเพื่อหาผลลัพธ์ทางคณิตศาสตร์และสถิติ และการนำเสนอและสร้างสารสนเทศจากข้อมูลด้วยแผนภาพหรือกราฟ ผู้ที่เริ่มพัฒนาเป็นนักสถิติสองท่านได้แก่ Ross Inhaka และ Robert Gentleman จาก University of Auckland ประเทศนิวซีแลนด์ โดยพัฒนาต่อยอดมาจากภาษา S และ S+ และได้เผยแพร่ตั้งแต่ปี ค.ศ. 1997 ภายใต้สัญญาอนุญาตสาธารณะทั่วไปของกนู (GNU General Public License) ทำให้โปรแกรม R มีลักษณะเป็นโปรแกรมเปิดอิสระ (Open Source) ที่อนุญาตให้นักพัฒนาหรือผู้ใช้งานทั่วไปมีสิทธิในการใช้และพัฒนาโปรแกรมได้โดยไม่เสียค่าใช้จ่ายไม่ว่าจะเป็นการใช้งานในวัตถุประสงค์ใด นอกจากนี้ผู้ใช้งานยังสามารถศึกษา เข้าถึง แก้ไขปรับปรุงกระบวนการทำงานของโปรแกรม และเพื่อเผยแพร่ให้บุคคลทั่วไปนำไปใช้หรือพัฒนาต่อยอดได้ (Maindonale and Bruan, 2010; Field, Mild and Field, 2012; Schumacker, 2012; Brundon and Comber, 2013) ปัจจุบัน R เป็นโปรแกรมที่ดีมากสำหรับการทำงานทางด้านสถิติและวิทยาการข้อมูล โดยได้รับความนิยมเป็นอย่างสูง ทั้งนี้เมื่อเปรียบเทียบกับโปรแกรมการคำนวณทางคณิตศาสตร์และวิเคราะห์ข้อมูลทางสถิติอื่น ๆ เช่น SAS, SPSS, MATLAB, Stata, Minitab หรือ JMP พบว่า โปรแกรม R มีจุดเด่นหลายประการ ดังนี้ R เป็นโปรแกรมประเภท multiple platform กล่าวคือสามารถติดตั้งบนคอมพิวเตอร์ได้บนทุกระบบปฏิบัติการทั้ง windows, Mac OS, Linux, Unix นอกจากนี้ผู้ใช้ยังสามารถเลือกใช้งานบน cloud โดยที่ไม่ต้องติดตั้งโปรแกรมลงบนเครื่องอีกด้วย มีประสิทธิภาพสูงในการทำงานเกี่ยวกับข้อมูล โดยสามารถนำเข้าข้อมูลจากแหล่งข้อมูลที่หลากหลายทั้งการนำเข้าข้อมูลโดยตรง การนำเข้าผ่านไฟล์ข้อมูลและฐานข้อมูลประเภทต่าง ๆ และจัดกระทำข้อมูลที่สามารถทำได้โดยง่ายและรวดเร็ว และดำเนินการกับข้อมูลขนาดใหญ่ (big data) ได้อย่างมีประสิทธิภาพ มีฟังก์ชันสำเร็จรูปจาก package เสริมต่าง ๆ ที่นักวิชาการจากทั่วโลกช่วยกันพัฒนาขึ้น โดยในปัจจุบันมีมากกว่า 10,000 packages ที่ผู้ใช้โปรแกรม R สามารถดาวน์โหลดมาติดตั้งและใช้เสริมประสิทธิภาพในการทำงาน ซึ่งช่วยให้การดำเนินการกับข้อมูลและการวิเคราะห์ข้อมูลทำได้โดยง่ายและหลากหลาย เทียบเท่าหรืออาจเหนือกว่าการใช้โปรแกรมวิเคราะห์ข้อมูลทางสถิติชั้นนำ นอกจากนี้ยังสามารถเชื่อมต่อและทำงานร่วมกับโปรแกรมวิเคราะห์ข้อมูลอื่น เช่น Mplus, MLWins, OpenBUGS, JAGS หรือ Stan หรือแม้กระทั่งการเขียนฟังก์ชันหรือ package ในกรณีที่ต้องทำงานที่มีความเฉพาะเจาะจงมาก ๆ ซึ่งทำให้ R เป็นโปรแกรมที่มีความยืดหยุ่นสูงและมีข้อจำกัดที่น้อยมากในการทำงาน มีจุดเด่นในการใช้งานด้านกราฟฟิกหรือการสร้างทัศนภาพของข้อมูล (data visualization) กล่าวคือโปรแกรม R โดยมี package หลายตัวที่ถูกพัฒนามาสำหรับการพัฒนาทัศนภาพข้อมูลโดยเฉพาะ และสามารถทำได้หลากหลายรูปแบบตั้งแต่ทัศนภาพข้อมูลเชิงสถิต (static data visualization) ทัศนภาพข้อมูลเชิงพลวัต (dynamic data visualization) และทัศนภาพข้อมูลเชิงปฏิสัมพันธ์ (interactive data visualization) ซึ่งสามารถทำได้ง่ายและมีประสิทธิภาพ เป็นโปรแกรมภาษาที่ง่ายต่อการเรียนรู้และใช้งาน นอกจากนี้ยังมีชุมชนผู้ใช้โปรแกรม R และแหล่งการเรียนรู้ออนไลน์ที่สามารถให้คำตอบแก่ผู้ใช้ได้อย่างกว้างขวางและตรงประเด็น ดังนั้นผู้ใช้โปรแกรม R หรือผู้ที่ต้องการศึกษา R ที่ไม่ได้มีพื้นฐานการเขียนโปรแกรมมาก่อนจึงสามารถเรียนรู้ภาษา R เป็นภาษาแรกได้โดยง่าย การดาวน์โหลดและติดตั้ง R ตัวอย่างในหนังสือเล่มนี้ที่มีการประมวลผลด้วยโปรแกรม R ประมวลผลบนโปรแกรม R version 4.0.0 (Arbor Day) สำหรับผู้อ่านที่ยังไม่มีโปรแกรมสามารถดาวน์โหลดโปรแกรมได้จาก http://www/r-project.org/ โดยเมื่อเข้าสู่ website ให้คลิ้กที่คำว่า “download R” เพื่อดาวน์โหลดซอฟต์แวร์จาก CRAN (Comprehensive R Archive Network) โดยให้ดาวน์โหลดตัว base distribution ที่เหมาะสมกับระบบปฏิบัติการ Linux, Windows และ Mac OS ของตนเอง แล้วดำเนินการติดตั้งโปรแกรมตามขั้นตอนที่ตัวช่วยการติดตั้งแนะนำ สภาพแวดล้อมของ R โดยปกติสภาพแวดล้อมของ R ประกอบด้วยหน้าต่างหลักได้แก่ Console, Editor และ Graphics ดังรูป 2.1 โดยที่แต่ละหน้าต่างมีหน้าที่แตกต่างกันดังนี้ รูป 2.1: สภาพแวดล้อมใน R R Console หน้าต่างนี้เป็นหน้าต่างทำงานหลักของ R และเป็นหน้าต่างแรกที่ผู้ใช้จะพบทันทีเมื่อเปิดโปรแกรม หน้าที่ของ Console ได้แก่ การรับคำสั่ง/นำข้อมูลเข้าสู่โปรแกรม รายงานสถานะการทำงาน/แจ้งเตือน และรายงานผลลัพธ์ต่าง ๆ จากการประมวลผลต่าง ๆ การป้อนคำสั่งใด ๆ ในหน้าต่าง Console สามารถทำได้ด้วยการพิมพ์คำสั่งบริเวณด้านหลังเครื่องหมาย &gt; เรียกว่าเครื่องหมาย prompt โดยเมื่อพิมพ์คำสั่งเสร็จแล้วให้ผู้ใช้กดปุ่ม Enter โปรแกรมจะทำให้ประมวลผล และแสดงผลลัพธ์ในบรรทัดถัดไป ดังนี้ การเขียนคำสั่งใน R console มีข้อจำกัดประการหนึ่งคือผู้ใช้สามารถเขียนคำสั่งและประมวลได้ทีละบรรทัด ผู้ใช้สามารถประมวลผลหลายคำสั่งภายในบรรทัดเดียวกันได้ โดยการใช้เครื่องหมาย semicolon (;) คั่นระหว่างคำสั่ง และเมื่อกด Enter จะได้ผลลัพธ์ดังตัวอย่างด้านบนในครั้งเดียว 1+1; 2^2+3; 2*3+4 R Editor จากข้อจำกัดในการทำงานบนหน้าต่าง Console ข้างต้น จึงมีการพัฒนาหน้าต่าง Editor สำหรับใช้เขียนชุดคำสั่งหรือป้อนข้อมูลที่มีความซับซ้อนเข้าสู่โปรแกรม หน้าต่าง Editor ยอมให้ผู้ใช้สามารถป้อนคำสั่งหรือข้อมูลได้หลายบรรทัด โดยยังไม่ต้องสั่งประมวลผลในทันที สามารถเลือกประมวลผลคำสั่งบางบรรทัด หรือทั้งหมดได้อย่างอิสระตามความต้องการ และยังสามารถบันทึกชุดคำสั่งไว้ในไฟล์นามสกุล .R (โดยทั่วไปเรียกว่า script file) ซึ่งช่วยให้ผู้ใช้สามารถจัดระเบียบในการทำงานได้ สามารถสืบค้นย้อนประวัติการทำงานจากคำสั่งที่เขียนไว้ก่อนหน้าได้ นอกจากนี้ยังสามารถนำกลับมาใช้ซ้ำ แก้ไข หรือดัดแปลงให้เหมาะสำหรับการทำงานอื่น ๆ ต่อไปได้อีกด้วย หน้าต่าง Editor นี้ไม่ได้ปรากฏให้ผู้ใช้ใช้งานได้ทันทีเมื่อเปิดโปรแกรม ผู้ใช้จำเป็นต้องเรียกเปิดหน้าต่างดังกล่าวขึ้นมาใช้งานโดยคลิกเลือกที่เมนู File บนแถบเมนูด้านบน จากนั้นเลือก New Script (สำหรับระบบปฏิบัติการ Windows) หรือเลือก New Document (สำหรับระบบปฏิบัติการ Mac OS) โดยหากต้องการให้ R ประมวลคำสั่งในบรรทัดใด ให้ผู้ใช้คลิกเลือกคำสั่งหรือทำ highlight คลุมบรรทัดของคำสั่งที่ต้องการประมวลผล จากนั้นกดปุ่ม Clt+R (สำหรับระบบปฏิบัติการ Windows) หรือกดปุ่ม ⌘+Enter (สำหรับระบบปฏิบัติการ Mac OS) R Graphic R สำหรับระบบปฏิบัติการ Mac OS เรียกหน้าต่างนี้ว่า Quartz เป็นหน้าต่างสำหรับแสดงผลลัพธ์เชิงกราฟิกที่ประมวลผลได้จากโปรแกรม ผู้ใช้จะพบกับหน้าต่างนี้เมื่อมีการเรียกใช้คำสั่งที่ให้ผลลัพธ์เชิงกราฟฟิก ดังตัวอย่างในรูป 2.1 ที่มีการสร้าง histogram ด้วยฟังก์ชัน hist() การคำนวณทางคณิตศาสตร์พื้นฐาน R มีฟังก์ชันพื้นฐานสำหรับการคำนวณทางคณิตศาสตร์จำนวนมาก เช่น การดำเนินการพีชคณิตพื้นฐานได้แก่ การบวก (+) ลบ (-) คูณ (*) หาร (/) ยกกำลัง (^) และ รากที่สอง (\\sqrt()) รวมทั้งการคำนวณผลลัพธ์จากฟังก์ชันอดิศัย (implicit function) ต่าง ๆ เช่น ฟังก์ชันตรีโกณมิติ sin(), cos(), tan() ฟังก์ชันลอการิทึมธรรมชาติ log() ฟังก์ชันเอกซ์โพเนนเซียล exp() และวงเล็บ ( ) เป็นต้น ชุดคำสั่งด้านล่างแสดงตัวอย่างการดำเนินการทางคณิตศาสตร์ใน R ผู้อ่านลองพิมพ์คำสั่งดังกล่างลงในเครื่องคอมพิวเตอร์ของตนเอง จากนั้นสังเกตผลลัพธ์ที่ได้ 1+1; 3-2; 4*5; 10/2 3^3; sqrt(625); 81^(1/3) 5%%3; (3^3+5-1) log(10); exp(5) กิจกรรม: ผู้เรียนลองหาผลลัพธ์ของ \\(e^3-ln(10)\\) "],
["-function.html", "บทที่ 3 ฟังก์ชัน (function)", " บทที่ 3 ฟังก์ชัน (function) บทเรียนที่แล้วผู้อ่านได้รู้จักและใช้งานฟังก์ชันทางคณิตศาสตร์ไปบางตัวแล้ว เช่น sqrt(), exp() และ log() เป็นต้น ผู้อ่านจะสังเกตว่าการใช้ฟังก์ชันดังกล่าวในการทำงานช่วยให้ผู้ใช้ลดขั้นตอนในการทำงานที่ไม่จำเป็นไปได้ นอกจากนี้ยังช่วยให้ syntax ของผู้เขียนโปรแกรมสั้นลงและมีประสิทธิภาพในการทำงานสูงขึ้น ตัวอย่างต่อไปนี้เปรียบเทียบการคำนวณค่าสัมบูรณ์ของ -10 ระหว่างการใช้ฟังก์ชัน abs() และไม่ได้ใช้ฟังก์ชันใน R จะเห็นว่าเมื่อใช้ฟังก์ชัน abs() การเขียนคำสั่งจะเขียนเพียงบรรทัดเดียวเท่านั้น abs(-10) ## [1] 10 แต่หากไม่ได้ใช้ฟังก์ชันการหาคำตอบดังกล่าวใน R อาจทำได้โดยการใช้คำสั่ง IF, ELSE ใน R ดังนี้ x&lt;-(-10) if(x&lt;0){ -(x) } else { x } ## [1] 10 จากตัวอย่างในข้างต้นผู้อ่านจะสังเกตเห็นว่า ฟังก์ชัน (function) คือชุดคำสั่งสำเร็จรูปที่ถูกพัฒนาขึ้นเพื่อใช้ในการทำงานเฉพาะด้าน การใช้ฟังก์ชันในการดำเนินงานจะช่วยให้ผู้ใช้ประหยัดเวลา ลดความผิดพลาดในการทำงาน และทำให้กระบวนการทำงานมีประสิทธิภาพมากยิ่งขึ้น ฟังก์ชันใน R ไม่ได้จำกัดแต่ด้านการคำนวณทางคณิตศาสตร์ เช่น การคัดเลือกตัวแปร การคัดกรองข้อมูล การสร้างแผนภาพหรือกราฟทางสถิติ และการประมวลผลเพื่อหาคำตอบในทางสถิติ เป็นต้น โดยทั่วไปฟังก์ชันแต่ละตัวจะมีส่วนประกอบจำนวน 3 ส่วนหลัก ได้แก่ (1) ส่วนข้อมูลนำเข้า (input) ส่วนนี้เป็นส่วนที่ผู้ใช้โปรแกรมต้องกำหนดหรือกรอกเข้าไปในฟังก์ชันเพื่อควบคุมการทำงานให้เป็นไปตามที่ต้องการ (2) ส่วนประมวลผล (process) ส่วนนี้เป็นส่วนการทำงานเบื้องหลัง ปกติแล้วผู้ใช้มักจะไม่เห็นการทำงานในส่วนนี้ของฟังก์ชัน การประมวลผลนี้จะดำเนินการโดยขึ้นกับชุดคำสั่งที่ผู้พัฒนาได้กำหนดไว้ และข้อมูลนำเข้าที่ผู้ใช้ระบุ และ (3) ส่วนผลลัพธ์ (output) เป็นผลลัพธ์หรือคำตอบที่ได้จากฟังก์ชัน ซึ่งอาจรายงานให้ผู้ใช้ทราบในหน้าต่าง R Console ในทันที่ที่ประมวลผลเสร็จสิ้น หรืออาจเก็บผลลัพธ์ดังกล่าวเอาไว้ในตัวแปร ซึ่งผู้ใช้จะต้องเรียกดูด้วยตนเองอีกครั้งหนึ่ง โดยปกติการเรียกใช้ฟังก์ชันใน R มีรูปแบบคำสั่งดังนี้ function_name(arg1, arg2, ...) เมื่อ function_name คือชื่อของฟังก์ชัน และ arg1 กับ arg2 เรียกว่า อาร์กิวเมนท์ (argument) ที่เป็นส่วนสำหรับข้อมูลนำเข้า (input) ที่ใช้สำหรับควบคุมการทำงานของฟังก์ชันเพื่อให้ผลลัพธ์เป็นไปตามที่ผู้ใช้ต้องการ โดยฟังก์ชันสามารถมีอาร์กิวเมนท์ได้มากกว่าหนึ่งตัวขึ้นอยู่กับลักษณะงานของแต่ละฟังก์ชัน ยกตัวอย่างเช่น ฟังก์ชัน log(x, base=exp(1)) ที่ใช้สำหรับหาค่า logarithm ของค่า x เมื่อกำหนดฐานของ logarithm ให้มีค่าเท่ากับ base = exp(1) โดยที่ exp(1) มีค่าเท่ากับ \\(e \\approx 2.71828...\\) จะเห็นว่าในที่นี้ คือชื่อของฟังก์ชันข้างต้นคือ log ส่วน x และ base คือ argument ของฟังก์ชัน สมมติว่าต้องการหาค่า natural logarithm ของ 10 สามารถทำได้ดังนี้ log(x=10,base=exp(1)) ## [1] 2.302585 log(10) ## [1] 2.302585 จากตัวอย่างข้างต้นผู้อ่านจะสังเกตเห็นว่าการเรียกใช้ฟังก์ชันใน R สามารถลดทอนการเขียนอาร์กิวเมนท์บางตัวได้ ในกรณีที่อาร์กิวเมนท์นั้นถูกกำหนดค่าเริ่มต้น (default value) เอาไว้ จากตัวอย่างข้างต้น อาร์กิวเมนท์ base ถูกกำหนดค่าเริ่มต้น (default) ให้มีค่าเท่ากับ exp(1) ดังนั้นระหว่างการเขียนคำสั่ง log(x, base=exp(1)) กับ log(x) จึงได้คำตอบเดียวกัน R เป็นโปรแกรมที่มีฟังก์ชันให้เลือกใช้งานจำนวนมากในทางปฏิบัติจึงยากที่จะจำวิธีการใช้ฟังก์ชันทั้งหมด การทำงานบนโปรแกรม R โดยปกติจึงมักมีการเรียกดูคู่มือการใช้ฟังก์ชันที่ใช้เป็นประจำ โดยผู้ใช้ R สามารถเรียกดูคู่มือของฟังก์ชันที่ต้องการได้โดยพิมพ์คำสั่ง ? ตามด้วยชื่อฟังก์ชัน หรือใช้ฟังก์ชัน help() เพื่อเรียกดูคู่มือดังกล่าว เช่น หากต้องการเรียกดูคู่มือการใช้ฟังก์ชัน log() ข้างต้นสามารถพิมพ์คำสั่งได้ดังนี้ ?log() help(log) ในบทเรียนอื่นของหนังสือเล่มนี้ผู้เรียนจะได้รู้จักกับฟังก์ชันที่จำเป็นสำหรับการทำงานทางด้านวิทยาการข้อมูลอีกหลายตัว ทั้งฟังก์ชันสำหรับการสร้างชุดข้อมูล นำเข้าและจัดกระทำชุดข้อมูล ฟังก์ชันสำหรับการสร้างทัศนภาพข้อมูล ฟังก์ชันสำหรับการคำนวณทางสถิติ เป็นต้น "],
["-variable.html", "บทที่ 4 ตัวแปร (Variable)", " บทที่ 4 ตัวแปร (Variable) ตัวแปรใน R มีความหมายที่แตกต่างไปจากตัวแปรในเชิงการวิจัยหรือการวิเคราะห์ข้อมูลทางสถิติ กล่าวคือ ตัวแปรใน R เป็นวัตถุประเภทหนึ่งภายใต้สภาพแวดล้อมของ R มีหน้าที่เก็บข้อมูลหรือผลลัพธ์ที่ได้จากการประมวลผลเอาไว้ในหน่วยความจำของคอมพิวเตอร์ ซึ่งทำให้ผู้ใช้สามารถเรียกดูค่าที่เก็บไว้ในภายหลัง หรือนำผลลัพธ์ที่เก็บไว้ไปใช้ในการดำเนินการขั้นตอนอื่น ๆ ต่อไปได้โดยไม่จำเป็นต้องป้อนข้อมูลหรือประมวลผลใหม่ซ้ำ ๆ ตัวแปรใน R สามารถจำแนกได้หลากหลายประเภทซึ่งทำให้การสร้างตัวแปรแต่ละประเภทจะมีรายละเอียดที่แตกต่างกัน ในบางส่วน หัวข้อนี้จะกล่าวถึงการสร้างตัวแปรพื้นฐานที่เรียกว่าตัวแปรสเกลาร์ (scalar) ซึ่งใช้เก็บข้อมูลได้หนึ่งค่าต่อตัวแปร การสร้างตัวแปรแบบสเกลาร์ใน R สามารถทำได้โดยใช้คำสั่ง &lt;- (อ่านว่า assign) เช่น x&lt;-10 หมายถึงกำหนดให้ R เก็บค่าคือ 10 ที่อยู่ทางส่วนปลายของลูกศรไว้ในตัวแปรชื่อ x ที่อยู่ทางส่วนหัวของลูกศร ดังตัวอย่าง x&lt;-10 #assign 10 to x เมื่อสร้างตัวแปร x ในข้างต้นแล้ว ผู้ใช้สามารถเรียกดูหรือใช้ค่าที่เก็บไว้ในตัวอย่างได้โดยการเรียกชื่อของตัวแปรดังกล่าว ดังนี้ x # print x ## [1] 10 ตัวแปรที่ถูกนิยามและกำหนดค่าให้แล้วสามารถนำไปใช้การดำเนินในส่วนอื่นต่อไปได้ ดังตัวอย่างต่อไปนี้ x&lt;-10 y&lt;-5 z&lt;-x+y z ## [1] 15 t&lt;-exp(x+y)/z sqrt(t) ## [1] 466.8345 หมายเหตุ สัญลักษณ์ # ในตัวอย่างข้างต้นเรียกว่า hashtag เป็นสัญลักษณ์ที่ใช้สำหรับการจดบันทึกเพื่อเตือนความจำเกี่ยวกับคำสั่งที่ใช้ในการทำงาน ข้อความทั้งหมดที่อยู่ภายหลัง # จะไม่ถูกนำไปประมวลผล การตั้งชื่อตัวแปรสามารถตั้งชื่อได้อย่างอิสระ ชื่อของตัวแปรสามารถประกอบไปได้ทั้งตัวอักษรและตัวเลข แต่มีข้อจำกัดในการตั้งชื่อคือห้ามขึ้นต้นชื่อตัวแปรด้วยตัวเลขและอักขระพิเศษ เช่น !, @, #, $, %, ^, &amp;, * เป็นต้น นอกจากนี้อักษรตัวเล็กและตัวใหญ่โปรแกรม R จะถือว่ามีความแตกต่างกัน (case-sensitive) ยกตัวอย่างเช่น y&lt;-5 #assign 5 to x Y&lt;-100 #assign 100 to x y #print y ## [1] 5 Y #print Y ## [1] 100 การกำหนดค่าให้กับตัวแปรนอกจากจะใช้ฟังก์ชัน assign (&lt;-) ดังในตัวอย่างข้างต้นแล้ว ยังสามารถใช้ฟังก์ชัน = ซึ่งให้ผลลัพธ์เหมือนกัน ข้อสังเกตที่น่าสนใจคือการกำหนดค่าให้กับตัวแปรด้วยฟังก์ชัน = ตัวแปรจะต้องอยู่ด้านซ้ายของฟังก์ชัน และค่าหรือข้อมูลที่ต้องการกำหนดให้กับตัวแปรจะต้องอยู่ทางด้านขวา ในขณะที่การกำหนดค่าให้กับตัวแปรด้วยฟังก์ชัน &lt;- สามารถทำในลักษณะใดก็ได้เพียงแต่กลับหัวลูกศรตามตำแหน่งของตัวแปร เช่น x&lt;-4 หรือ 4-&gt;x ซึ่งจะให้ผลลัพธ์ที่เหมือนกัน ประเภทของตัวแปรจำแนกตามลักษณะข้อมูล ตัวแปรแบบสเกลาร์สามารถจำแนกได้เป็น 3 ประเภท ตามลักษณะของข้อมูลที่จัดเก็บไว้ในตัวแปร ได้แก่ ตัวแปรตัวเลข (numeric variables) ตัวแปรตัวอักษร (character variable) และตัวแปรตรรกะ (logical variables) รายละเอียดมีดังนี้ 1. ตัวแปรตัวเลข (numeric variables) ตัวแปรประเภทนี้ใช้จัดเก็บข้อมูลที่มีค่าเป็นจำนวนจริง (real number) และสามารถนำไปดำเนินการทางคณิตศาสตร์ได้ การสร้างตัวแปรที่เก็บข้อมูลตัวเลขสามารถดำเนินการได้โดยใช้ฟังก์ชัน &lt;- ผู้ใช้สามารถเรียกดูผลลัพธ์ที่เก็บไว้ในตัวแปรรวมทั้งนำค่าที่เก็บไว้ในตัวแปรไปดำเนินการในขั้นตอนอื่น ๆ ต่อไป ดังตัวอย่างในข้างต้น 2. ตัวแปรตัวอักษร (character variables) ตัวแปรประเภทนี้ใช้จัดเก็บข้อมูลที่เป็นตัวอักษรหรือข้อความที่ไม่มีค่าในเชิงปริมาณ และไม่สามารถนำมาดำเนินการใด ๆ ทางคณิตศาสตร์ได้ การสร้างตัวแปรประเภทนี้สามารถทำได้ในทำนองเดียวกับการสร้างตัวแปรตัวเลขโดยใช้ฟังก์ชัน &lt;- เหมือนกัน แต่จำเป็นต้องเขียนเครื่องหมาย quotation (\" \") คร่อมตัวอักษรหรือข้อความที่ต้องการจัดเก็บไว้ในตัวแปร ยกตัวอย่างเช่น หากต้องการสร้างตัวแปร gender1 เพื่อเก็บข้อมูล Male และตัวแปร gender2 เพื่อเก็บข้อมูล Female สามารถทำได้ดังนี้ gender1&lt;-&quot;Male&quot; gender2&lt;-&quot;Female&quot; gender1 ## [1] &quot;Male&quot; gender2 ## [1] &quot;Female&quot; ผู้อ่านจะเห็นว่าการนำตัวแปรตัวอักษรมาดำเนินการทางคณิตศาสตร์ ไม่สามารถทำได้เนื่องจากตัวแปรดังกล่าวไม่ได้มีความหมายในเชิงปริมาณ ถึงแม้ว่าข้อมูลที่เก็บอยู่ในตัวแปรตัวอักษรจะมีลักษณะที่เหมือนกับตัวเลขก็ตาม เช่น a&lt;-&quot;1&quot; b&lt;-&quot;3&quot; a+b ## Error in a + b : non-numeric argument to binary operator 3. ตัวแปรตรรกะ (logical variables) ตัวแปรประเภทนี้ใช้จัดเก็บข้อมูลที่เป็นค่าความจริงของประพจน์ (statement) โดยในทางคณิตศาสตร์ประพจน์คือข้อความที่สามารถระบุค่าความจริงของข้อความได้ว่าเป็นจริง (TRUE) หรือเป็นเท็จ (FALSE) การสร้างตัวแปรเพื่อเก็บข้อมูลตรรกะสามารถอาจทำได้ 2 วิธีการ วิธีการแรกคือการสร้างตัวแปรตรรกะโดยตรงด้วยการป้อนข้อมูลค่าความจริงทีละค่าในทำนองเดียวกับข้อมูลตัวเลขและตัวอักษรโดยใช้คำสั่ง &lt;- โดยข้อมูลค่าความจริงที่เป็นจริงกำหนดโดยค่า TRUE หรือ T ส่วนค่าความจริงที่เป็นเท็จกำหนดโดยค่า FALSE หรือ F ดังนี้ x&lt;-TRUE x ## [1] TRUE y&lt;-F y ## [1] FALSE วิธีการที่สองในการสร้างตัวแปรสำหรับเก็บข้อมูลตรรกะคือจากผลการตรวจสอบเงื่อนไขด้วยตัวดำเนินการเชิงตรรกะ (logical operator) ได้แก่ &lt; (น้อยกว่า), &gt; (มากกว่า), &lt;= (น้อยกว่าหรือเท่ากับ), &gt;= (มากกว่าหรือเท่ากับ), == (เท่ากับ) และ != (ไม่เท่ากับ) ดังตัวอย่างต่อไปนี้ student1&lt;-65 #assign 65 to student student1 &gt; 50 #Is student1 greater than 50? ## [1] TRUE student1 == 70 #Is student1 equal to 50? ## [1] FALSE จากตัวอย่างข้างต้นจะเห็นว่ามีการสร้างตัวแปร student1 เพื่อเก็บคะแนนซึ่งมีค่าเท่ากับ 65 คะแนน จากนั้นมีการตรวจสอบเงื่อนไขด้วยตัวดำเนินการเชิงตรรกะ 2 เงื่อนไข เงื่อนไขแรกคือการตรวจสอบว่า คะแนนที่เก็บไว้ในตัวแปร student1 มีค่ามากกว่า 50 คะแนนหรือไม่ และมีค่าเท่ากับ 70 คะแนนหรือไม่ ซึ่งจะเห็นว่าผลลัพธ์ที่ได้คือข้อมูลใหม่ที่เป็นค่าความจริงของการตรวจสอบทั้งสอง โดยมีค่าเท่ากับ TRUE และ FALSE ตามลำดับ นอกจากนี้ผู้ใช้ยังสามารถเก็บค่าของข้อมูลดังกล่าวไว้ในตัวแปรใหม่ได้ เช่น result1&lt;-student1 &gt; 50 result2&lt;-student1 == 70 result1 ## [1] TRUE result2 ## [1] FALSE "],
["-vectors.html", "บทที่ 5 เวกเตอร์ (vectors) การสร้างเวกเตอร์ การดำเนินการของเวกเตอร์", " บทที่ 5 เวกเตอร์ (vectors) ตัวแปรที่กล่าวถึงในหัวข้อที่ผ่านมาเป็นตัวแปรที่สามารถเก็บข้อมูลได้จำนวนหนึ่งค่าต่อตัวแปร โดยปกติใน R จะเรียกตัวแปรนี้ว่าตัวแปรสเกลาร์ (scalar) อย่างไรก็ตามในทางปฏิบัติ ตัวแปรสเกลาร์ยังมีประสิทธิภาพไม่เพียงพอที่จะรองรับการวิเคราะห์ข้อมูลที่มีตัวแปรและข้อมูลจำนวนมาก จึงมีความจำเป็นที่จะต้องมีตัวแปรที่สามารถเก็บข้อมูลได้มากขึ้น และมีโครงสร้างการเก็บข้อมูลที่มีความซับซ้อนขึ้น หากพิจารณาจากโครงสร้างการเก็บข้อมูลของตัวแปรใน R ดังกล่าว อาจจำแนกตัวแปรออกได้เป็น 3 ประเภทได้แก่ เวกเตอร์ (vectors) เมทริกซ์ (matrices) และชุดข้อมูล (dataframe) โดยหัวข้อนี้จะกล่าวถึงเวกเตอร์ก่อน รายละเอียดมีดังนี้ เวกเตอร์ คือตัวแปรที่มีโครงสร้างสำหรับจัดเก็บข้อมูลคล้ายตารางที่มีจำนวนหนึ่งคอลัมน์ กล่าวคือเวกเตอร์เป็นตารางที่มีมิติเท่ากับ \\(n \\times 1\\) โดยที่ \\(n\\) คือจำนวนสมาชิกของเวกเตอร์ หากกำหนดให้ \\(\\textbf{u}\\) คือเวกเตอร์ที่มีขนาด \\(5 \\times 1\\) โดยที่ \\(1,4,6,4\\) และ \\(8\\) คือสมาชิกภายในเวกเตอร์ ในทางคณิตศาสตร์จะสามารถเขียนสัญลักษณ์แทนเวกเตอร์ \\(\\textbf{u}\\) ได้ดังนี้ \\[\\textbf{u} = \\begin{pmatrix} 1\\\\ 4\\\\ 6\\\\ 4 \\\\ 8 \\end{pmatrix}_{n \\times 1}\\] การสร้างเวกเตอร์ การสร้างเวกเตอร์ใน R สามารถทำได้หลายวิธี วิธีการพื้นฐานคือการสร้างเวกเตอร์โดยใช้ฟังก์ชัน &lt;- ร่วมกับฟังก์ชัน concatenate c() ที่มีหน้าที่ต่อเชื่อมข้อมูลหลายค่าเข้าด้วยกันให้เป็นเวกเตอร์ ยกตัวอย่างเช่น สมมติว่าต้องการเก็บข้อมูลคะแนนสอบวิชาสถิติของนิสิตจำนวน 10 คน ที่มีข้อมูลดังรูปด้านล่าง ไว้ในเวกเตอร์ score สามารถเขียนคำสั่งได้ดังตัวอย่าง score&lt;-c(53,69,52,62,57,54,55,67,53,58) #create &quot;score&quot; vector score #print score ## [1] 53 69 52 62 57 54 55 67 53 58 จากตัวอย่างข้างต้นจะเห็นว่าการพิมพ์ชื่อของเวกเตอร์เป็นการเรียกดูสมาชิกทั้งหมดภายในเวกเตอร์นั้น เหมือนกับการเรียกดูตัวแปร ในกรณีที่ต้องการเรียกดูสมาชิกบางตัวภายในเวกเตอร์สามารถทำได้โดยใช้วิธีการอ้างอิงลำดับของสมาชิกที่ต้องการภายในเวกเตอร์นั้น โดยรูปแบบของคำสั่งประกอบด้วยชื่อของเวกเตอร์ที่เก็บข้อมูลแล้วตามด้วยเครื่องหมาย [i] โดยที่ i คือลำดับของสมาชิกที่ต้องการ ยกตัวอย่างเช่น จากเวกเตอร์ score หากต้องการเรียกดูคะแนนสอบของนิสิตคนที่ 3 สามารถเขียนคำสั่งเป็น score[3] หรือหากต้องการเรียกคะแนนสอบวิชาสถิติของนิสิตคนที่ 5, 6, ..., 9 สามารถเขียนคำสั่งเป็น score[5:9] ดังตัวอย่าง score[3] ## [1] 52 score[5:9] ## [1] 57 54 55 67 53 ในกรณีที่สมาชิกที่ต้องการเรียกดูไม่ได้เรียงกันเป็นลำดับ เช่นต้องการเรียกคะแนนสถิติของนิสิตคนที่ 2, 5, 7 และ 10 สามารถเขียนคำสั่งได้ดังนี้ score[c(2,5,7,10)] ## [1] 69 57 55 58 จากการอ้างอิงสมาชิกภายในเวกเตอร์ข้างต้น สามารถนำมาใช้ในการแก้ไขหรือเปลี่ยนแปลงข้อมูลภายในเวกเตอร์ได้อีกด้วย เช่น หากพบว่ามีการบันทึกคะแนนสอบวิชาสถิติของนิสิตคนที่ 6 มีความผิดพลาดและต้องแก้ไขให้มีค่าเท่ากับ 60 คะแนน สามารถทำได้ดังนี้ score[6]&lt;-60 score ## [1] 53 69 52 62 57 60 55 67 53 58 การดำเนินการของเวกเตอร์ การดำเนินการของเวกเตอร์ใน R อาจจำแนกเป็น 2 ลักษณะ ได้แก่ การดำเนินการระหว่างเวกเตอร์กับสเกลาร์ และการดำเนินการระหว่างเวกเตอร์กับเวกเตอร์ รายละเอียดมีดังนี้ การดำเนินการระหว่างเวกเตอร์กับสเกลาร์ โดยปกติการดำเนินการระหว่างเวกเตอร์กับสเกลาร์มักประกอบด้วย การบวก ลบ คูณ หาร ระหว่างเวกเตอร์กับสเกลาร์ โดยไม่ว่าจะเป็นการดำเนินการใดก็ตามจะเป็นการนำตัวเลขสเกลาร์ที่กำหนดไปดำเนินการกับสมาชิกทุกตัวภายในเวกเตอร์เช่น จากเวกเตอร์ score ข้างต้น สมมุติว่ามีการบันทึกคะแนนของนิสิตผิดพลาดไป โดยต้องแก้ไขใหม่โดยบวกคะแนนให้นิสิตทุกคน คนละ 2 คะแนน สามารถทำได้ดังนี้ score+2 ## [1] 55 71 54 64 59 62 57 69 55 60 การดำเนินการระหว่างเวกเตอร์กับเวกเตอร์ การดำเนินการระหว่างเวกเตอร์กับเวกเตอร์ หากเป็นการบวก ลบ คูณ และหาร มีเงื่อนไขที่จำเป็นคือเวกเตอร์ทั้งสองที่นำมาดำเนินการนั้นจำเป็นที่จะต้องมีจำนวนมิติที่เท่ากัน และการดำเนินการดังกล่าวจะนำสมาชิกของเวกเตอร์ในตำแหน่งเดียวกันมาดำเนินการกันและได้ผลลัพธ์เป็นเวกเตอร์ใหม่ ยกตัวอย่างเช่น สมมุติว่ามีข้อมูลคะแนนสอบกลางภาค และปลายภาคของนิสิตจำนวน 5 คนดังตารางด้านล่าง midterm final student1 70 70 student2 62 64 student3 56 47 student4 64 60 student5 56 62 จากข้อมูลข้างต้น สมมุติว่าต้องการสร้างเวกเตอร์ของคะแนนรวมจากคะแนนสอบกลางภาคและปลายภาค โดยกำหนดให้กับคะแนนสอบกลางภาคมีน้ำหนักเป็น 40% และคะแนนสอบปลายภาคมีน้ำหนักเป็น 60% สามารถทำได้ดังนี้ midterm&lt;-c(70,62,56,64,56) final&lt;-c(70,64,47,60,62) total&lt;-0.4*midterm + 0.6*final total ## [1] 70.0 63.2 50.6 61.6 59.6 จะเห็นว่าคำสั่งข้างต้นมีการดำเนินการเช่นเดียวกับการดำเนินการทางคณิตศาสตร์ดังนี้ \\[0.4 \\times \\begin{pmatrix} 70\\\\ 62\\\\ 56\\\\ 64\\\\ 56 \\end{pmatrix}+0.6\\times\\begin{pmatrix} 70\\\\ 64\\\\ 47\\\\ 60\\\\ 62 \\end{pmatrix}=\\begin{pmatrix} (0.4)(70) + (0.6)(70)\\\\ (0.4)(62) + (0.6)(64)\\\\ (0.4)(56) + (0.6)(47)\\\\ (0.4)(64) + (0.6)(60)\\\\ (0.4)(56) + (0.6)(62) \\end{pmatrix}\\] "],
["literature.html", "บทที่ 6 Literature", " บทที่ 6 Literature Here is a review of existing methods. "],
["methods.html", "บทที่ 7 Methods", " บทที่ 7 Methods We describe our methods in this chapter. "],
["applications.html", "บทที่ 8 Applications 8.1 Example one 8.2 Example two", " บทที่ 8 Applications Some significant applications are demonstrated in this chapter. 8.1 Example one 8.2 Example two "],
["final-words.html", "บทที่ 9 Final Words", " บทที่ 9 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
